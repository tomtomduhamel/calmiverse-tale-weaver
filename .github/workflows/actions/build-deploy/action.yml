
name: "Build et déploiement"
description: "Compile et déploie les functions Firebase"

inputs:
  project-id:
    description: "ID du projet Firebase"
    required: true
  firebase-token:
    description: "Token Firebase CLI"
    required: true
  working-directory:
    description: "Répertoire de travail"
    required: true
  deploy-target:
    description: "Cible de déploiement (functions ou functionsV2)"
    required: false
    default: "functions"

runs:
  using: "composite"
  steps:
    - name: Vérification de l'environnement
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Vérification de l'environnement de build..."
        echo "📦 Version de Node.js: $(node -v)"
        echo "📦 Version de npm: $(npm -v)"
        
        if [ ! -f "package.json" ]; then
          echo "❌ package.json non trouvé dans $(pwd)"
          exit 1
        fi

    - name: Mise à jour de Firebase CLI
      shell: bash
      run: |
        echo "🔧 Mise à jour forcée de Firebase CLI..."
        npm uninstall -g firebase-tools || true
        npm cache clean --force
        npm install -g firebase-tools@latest --force
        echo "Version Firebase CLI après mise à jour:"
        firebase --version

    - name: Build Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔨 Compilation des fonctions..."
        # Nettoyer le dossier lib avant la compilation
        rm -rf lib
        
        # Compiler avec TypeScript
        npm run build
        
        if [ $? -ne 0 ]; then
          echo "❌ ERREUR de compilation"
          exit 1
        fi
        
        # Synchroniser les versions firebase dans lib/package.json pour éviter les incompatibilités
        echo "📦 Préparation du package.json pour déploiement dans lib..."
        FIREBASE_ADMIN_VERSION=$(npm list firebase-admin --json | grep -o '"version":"[^"]*"' | cut -d'"' -f4 || echo "13.0.2")
        FIREBASE_FUNCTIONS_VERSION=$(npm list firebase-functions --json | grep -o '"version":"[^"]*"' | cut -d'"' -f4 || echo "6.3.1")
        
        # Créer/mettre à jour package.json dans lib avec les bonnes versions
        echo "{\"main\": \"index.js\", \"dependencies\": {\"firebase-admin\": \"^${FIREBASE_ADMIN_VERSION}\", \"firebase-functions\": \"^${FIREBASE_FUNCTIONS_VERSION}\"}}" > lib/package.json
        
        echo "✅ Build terminé, lib/package.json créé avec versions:"
        cat lib/package.json

    - name: Configuration de Firebase
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Configuration de Firebase pour le projet ${{ inputs.project-id }}..."
        echo "{\"projects\": {\"default\": \"${{ inputs.project-id }}\"}}" > .firebaserc
        
        # Création/mise à jour du fichier functions.yaml avec configuration appropriée
        echo "# Configuration Firebase Functions" > functions.yaml
        echo "specVersion: v1" >> functions.yaml
        echo "functions:" >> functions.yaml
        echo "  - source: ." >> functions.yaml
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          echo "    codebase: v2" >> functions.yaml
        else
          echo "    codebase: default" >> functions.yaml
        fi
        echo "    runtime: nodejs20" >> functions.yaml
        echo "    memory: 1GB" >> functions.yaml
        echo "    timeout: 540s" >> functions.yaml
        
        echo "📄 Contenu du fichier functions.yaml créé:"
        cat functions.yaml
    
    - name: Déploiement des Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Déploiement des fonctions sur ${{ inputs.project-id }} avec cible ${{ inputs.deploy-target }}..."
        
        # Vérifier la version Firebase CLI installée
        FIREBASE_CLI_VERSION=$(firebase --version | cut -d' ' -f1)
        echo "Version Firebase CLI pour déploiement: $FIREBASE_CLI_VERSION"
        
        # Si version trop ancienne, mettre à jour une dernière fois
        if [[ "$FIREBASE_CLI_VERSION" < "12.0.0" ]]; then
          echo "⚠️ Version Firebase CLI trop ancienne, mise à jour forcée avant déploiement..."
          npm install -g firebase-tools@latest --force
          firebase --version
        fi
        
        # Déterminer la cible de déploiement
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          DEPLOY_TARGET="--only functions:v2"
          echo "Déploiement des functions v2"
        else
          DEPLOY_TARGET="--only functions"
          echo "Déploiement des functions standard"
        fi
        
        # Afficher le contenu du fichier functions.yaml
        echo "📄 Contenu du fichier functions.yaml avant déploiement:"
        cat functions.yaml
        
        # Déployer avec la Firebase CLI mise à jour
        echo "🔍 Déploiement avec Firebase CLI $(firebase --version)"
        firebase deploy $DEPLOY_TARGET \
          --project ${{ inputs.project-id }} \
          --token "${{ inputs.firebase-token }}" \
          --non-interactive \
          --debug
