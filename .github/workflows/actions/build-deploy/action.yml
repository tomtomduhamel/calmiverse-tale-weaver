
name: "Build et déploiement"
description: "Compile et déploie les functions Firebase"

inputs:
  project-id:
    description: "ID du projet Firebase"
    required: true
  firebase-token:
    description: "Token Firebase CLI"
    required: true
  working-directory:
    description: "Répertoire de travail"
    required: true
  deploy-target:
    description: "Cible de déploiement (functions ou functionsV2)"
    required: false
    default: "functions"

runs:
  using: "composite"
  steps:
    - name: Vérification de l'environnement
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Vérification de l'environnement de build..."
        echo "📦 Version de Node.js: $(node -v)"
        echo "📦 Version de npm: $(npm -v)"
        
        if [ ! -f "package.json" ]; then
          echo "❌ package.json non trouvé dans $(pwd)"
          exit 1
        fi
        
        # Vérifier que les variables d'environnement sont définies
        if [ -z "${{ inputs.project-id }}" ]; then
          echo "❌ project-id manquant"
          exit 1
        fi
        
        if [ -z "${{ inputs.firebase-token }}" ]; then
          echo "❌ firebase-token manquant"
          exit 1
        fi
        
        # Installation explicite des dépendances critiques avec résolution des conflits
        echo "📦 Installation explicite des dépendances critiques..."
        rm -rf node_modules/firebase-admin node_modules/firebase-functions
        npm install firebase-admin@latest firebase-functions@latest --force --no-package-lock
        
        # Vérification approfondie des dépendances
        if [ ! -d "node_modules/firebase-admin" ]; then
          echo "❌ firebase-admin n'est PAS installé correctement!"
          mkdir -p node_modules
          npm install firebase-admin@latest --force --no-package-lock
        else
          echo "✅ firebase-admin est correctement installé"
          ls -la node_modules/firebase-admin
        fi
        
        if [ ! -d "node_modules/firebase-functions" ]; then
          echo "❌ firebase-functions n'est PAS installé correctement!"
          mkdir -p node_modules
          npm install firebase-functions@latest --force --no-package-lock
        else
          echo "✅ firebase-functions est installé avec succès"
          ls -la node_modules/firebase-functions
        fi

    - name: Build Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔨 Compilation des fonctions..."
        # Nettoyer le dossier lib avant la compilation
        rm -rf lib
        
        # Compiler avec TypeScript
        npm run build
        
        if [ $? -ne 0 ]; then
          echo "❌ ERREUR de compilation"
          exit 1
        fi
        
        # Vérifier le contenu du dossier lib
        if [ ! -d "lib" ] || [ -z "$(ls -A lib 2>/dev/null)" ]; then
          echo "❌ Le dossier lib est vide ou n'existe pas après la compilation"
          ls -la
          exit 1
        fi
        
        echo "✅ Build terminé avec succès"
        echo "📁 Structure du dossier lib:"
        find lib -type f | sort
        
        # Exécuter le script pour copier les dépendances dans lib
        echo "📦 Copie des dépendances dans lib pour le déploiement..."
        npm run copy-deps
        
        # Vérification des dépendances copiées
        echo "📦 Vérification des dépendances copiées:"
        if [ ! -d "lib/node_modules/firebase-admin" ]; then
          echo "⚠️ firebase-admin manquant dans lib/node_modules, copie d'urgence..."
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-admin lib/node_modules/
          
          # Double vérification après copie
          if [ ! -d "lib/node_modules/firebase-admin" ]; then
            echo "❌ ERREUR CRITIQUE: Impossible de copier firebase-admin dans lib/node_modules"
            ls -la node_modules
            exit 1
          fi
        else
          echo "✅ firebase-admin est présent dans lib/node_modules"
          ls -la lib/node_modules/firebase-admin
        fi
        
        if [ ! -d "lib/node_modules/firebase-functions" ]; then
          echo "⚠️ firebase-functions manquant dans lib/node_modules, copie d'urgence..."
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-functions lib/node_modules/
          
          # Double vérification après copie
          if [ ! -d "lib/node_modules/firebase-functions" ]; then
            echo "❌ ERREUR CRITIQUE: Impossible de copier firebase-functions dans lib/node_modules"
            ls -la node_modules
            exit 1
          fi
        else
          echo "✅ firebase-functions est présent dans lib/node_modules"
          ls -la lib/node_modules/firebase-functions
        fi
    
    - name: Configuration de Firebase
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Configuration de Firebase pour le projet ${{ inputs.project-id }}..."
        echo '{"projects": {"default": "${{ inputs.project-id }}"}}' > .firebaserc
    
    - name: Déploiement des Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Déploiement des fonctions sur ${{ inputs.project-id }}..."
        
        # Vérifier une dernière fois que le dossier lib et ses dépendances existent
        if [ ! -d "lib" ]; then
          echo "❌ Le dossier lib n'existe pas avant le déploiement"
          exit 1
        fi
        
        # Créer un package.json simplifié dans lib si nécessaire
        if [ ! -f "lib/package.json" ]; then
          echo "{\"main\": \"index.js\", \"dependencies\": {\"firebase-admin\": \"^13.0.2\", \"firebase-functions\": \"^6.3.1\"}}" > lib/package.json
          echo "✅ package.json simplifié créé dans lib"
        fi
        
        # Vérifier le contenu du dossier lib/node_modules
        echo "📦 Contenu de lib/node_modules avant déploiement:"
        ls -la lib/node_modules || echo "lib/node_modules n'existe pas"
        
        # Copie d'urgence des dépendances critiques
        if [ ! -d "lib/node_modules/firebase-admin" ]; then
          echo "⚠️ Copie d'urgence de firebase-admin dans lib/node_modules..."
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-admin lib/node_modules/
        fi
        
        if [ ! -d "lib/node_modules/firebase-functions" ]; then
          echo "⚠️ Copie d'urgence de firebase-functions dans lib/node_modules..."
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-functions lib/node_modules/
        fi
        
        # Installer npm dans lib si nécessaire
        if [ ! -d "lib/node_modules/npm" ]; then
          echo "📦 Installation de npm dans lib/node_modules..."
          cd lib && npm install npm --no-save --no-package-lock && cd ..
        fi
        
        # Ajouter node_modules à NODE_PATH pour s'assurer que les modules sont trouvés
        export NODE_PATH="$PWD/lib/node_modules:$NODE_PATH"
        echo "NODE_PATH=$NODE_PATH"
        
        # Déterminer la cible de déploiement
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          DEPLOY_TARGET="--only functions:v2"
          echo "Déploiement des functions v2"
        else
          DEPLOY_TARGET="--only functions"
          echo "Déploiement des functions standard"
        fi
        
        # Créer un functions.yml temporaire pour debug
        echo "functions:" > functions.yml
        echo "  - source: ." >> functions.yml
        echo "    runtime: nodejs20" >> functions.yml
        
        # Déployer avec le mode debug pour plus d'informations
        firebase deploy $DEPLOY_TARGET \
          --project ${{ inputs.project-id }} \
          --token "${{ inputs.firebase-token }}" \
          --non-interactive \
          --debug
