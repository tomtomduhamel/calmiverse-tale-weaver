
name: "Build et d√©ploiement"
description: "Compile et d√©ploie les functions Firebase"

inputs:
  project-id:
    description: "ID du projet Firebase"
    required: true
  firebase-token:
    description: "Token Firebase CLI"
    required: true
  working-directory:
    description: "R√©pertoire de travail"
    required: true
  deploy-target:
    description: "Cible de d√©ploiement (functions ou functionsV2)"
    required: false
    default: "functions"

runs:
  using: "composite"
  steps:
    - name: V√©rification de l'environnement
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç V√©rification de l'environnement de build..."
        echo "üì¶ Version de Node.js: $(node -v)"
        echo "üì¶ Version de npm: $(npm -v)"
        
        if [ ! -f "package.json" ]; then
          echo "‚ùå package.json non trouv√© dans $(pwd)"
          exit 1
        fi

    - name: Mise √† jour de Firebase CLI
      shell: bash
      run: |
        echo "üîß Mise √† jour forc√©e de Firebase CLI..."
        npm uninstall -g firebase-tools || true
        npm cache clean --force
        npm install -g firebase-tools@latest --force
        echo "Version Firebase CLI apr√®s mise √† jour:"
        firebase --version

    - name: Build Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üî® Compilation des fonctions..."
        # Nettoyer le dossier lib avant la compilation
        rm -rf lib
        
        # Compiler avec TypeScript
        npm run build
        
        if [ $? -ne 0 ]; then
          echo "‚ùå ERREUR de compilation"
          exit 1
        fi
        
        # Copier les d√©pendances et cr√©er package.json simplifi√©
        echo "üì¶ Copie des d√©pendances dans lib..."
        npm run copy-deps || echo "Aucun script copy-deps trouv√©, progression..."
        
        # V√©rification des d√©pendances copi√©es
        if [ -f "lib/package.json" ]; then
          echo "‚úÖ lib/package.json existe d√©j√†"
        else
          echo "‚ö†Ô∏è Cr√©ation de package.json simplifi√© dans lib..."
          FIREBASE_ADMIN_VERSION=$(npm list firebase-admin --json | grep -o '"version":"[^"]*"' | cut -d'"' -f4 || echo "13.0.2")
          FIREBASE_FUNCTIONS_VERSION=$(npm list firebase-functions --json | grep -o '"version":"[^"]*"' | cut -d'"' -f4 || echo "6.3.1")
          
          echo "{\"main\": \"index.js\", \"dependencies\": {\"firebase-admin\": \"^${FIREBASE_ADMIN_VERSION}\", \"firebase-functions\": \"^${FIREBASE_FUNCTIONS_VERSION}\"}}" > lib/package.json
        fi

    - name: Configuration de Firebase
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Configuration de Firebase pour le projet ${{ inputs.project-id }}..."
        echo "{\"projects\": {\"default\": \"${{ inputs.project-id }}\"}}" > .firebaserc
        
        # Assurer que le bon fichier functions.yaml est pr√©sent et valide
        echo "# Configuration Firebase Functions" > functions.yaml
        echo "specVersion: v1" >> functions.yaml
        echo "functions:" >> functions.yaml
        echo "  - source: ." >> functions.yaml
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          echo "    codebase: v2" >> functions.yaml
        else
          echo "    codebase: default" >> functions.yaml
        fi
        echo "    runtime: nodejs20" >> functions.yaml
        echo "    memory: 1GB" >> functions.yaml
        echo "    timeout: 540s" >> functions.yaml
    
    - name: D√©ploiement des Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ D√©ploiement des fonctions sur ${{ inputs.project-id }}..."
        
        # Ajouter node_modules √† NODE_PATH pour s'assurer que les modules sont trouv√©s
        export NODE_PATH="$PWD/lib/node_modules:$NODE_PATH"
        echo "NODE_PATH=$NODE_PATH"
        
        # D√©terminer la cible de d√©ploiement
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          DEPLOY_TARGET="--only functions:v2"
          echo "D√©ploiement des functions v2"
        else
          DEPLOY_TARGET="--only functions"
          echo "D√©ploiement des functions standard"
        fi
        
        # Afficher le contenu du fichier functions.yaml
        echo "üìÑ Contenu du fichier functions.yaml:"
        cat functions.yaml
        
        # D√©ployer avec la Firebase CLI mise √† jour
        echo "üîç D√©ploiement avec Firebase CLI $(firebase --version)"
        firebase deploy $DEPLOY_TARGET \
          --project ${{ inputs.project-id }} \
          --token "${{ inputs.firebase-token }}" \
          --non-interactive \
          --debug
