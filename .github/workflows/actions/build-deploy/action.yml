
name: "Build et d√©ploiement"
description: "Compile et d√©ploie les functions Firebase"

inputs:
  project-id:
    description: "ID du projet Firebase"
    required: true
  firebase-token:
    description: "Token Firebase CLI"
    required: true
  working-directory:
    description: "R√©pertoire de travail"
    required: true
  deploy-target:
    description: "Cible de d√©ploiement (functions ou functionsV2)"
    required: false
    default: "functions"

runs:
  using: "composite"
  steps:
    - name: V√©rification de l'environnement
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç V√©rification de l'environnement de build..."
        echo "üì¶ Version de Node.js: $(node -v)"
        echo "üì¶ Version de npm: $(npm -v)"
        
        if [ ! -f "package.json" ]; then
          echo "‚ùå package.json non trouv√© dans $(pwd)"
          exit 1
        fi
        
        # V√©rifier que les variables d'environnement sont d√©finies
        if [ -z "${{ inputs.project-id }}" ]; then
          echo "‚ùå project-id manquant"
          exit 1
        fi
        
        if [ -z "${{ inputs.firebase-token }}" ]; then
          echo "‚ùå firebase-token manquant"
          exit 1
        fi

        # Installation explicite des d√©pendances critiques
        echo "üì¶ Installation explicite des d√©pendances critiques..."
        npm install firebase-admin firebase-functions --no-save
        
        # V√©rifier l'installation de firebase-admin
        if [ -d "node_modules/firebase-admin" ]; then
          echo "‚úÖ firebase-admin est correctement install√©"
          ls -la node_modules/firebase-admin
        else
          echo "‚ùå firebase-admin n'est PAS install√© correctement!"
          echo "Installation de firebase-admin..."
          npm install firebase-admin --save --no-package-lock
        fi
        
        # V√©rifier firebase-functions √©galement
        if [ -d "node_modules/firebase-functions" ]; then
          echo "‚úÖ firebase-functions est install√© avec succ√®s"
          ls -la node_modules/firebase-functions
        else
          echo "‚ùå firebase-functions n'est PAS install√© correctement!"
          npm install firebase-functions --save --no-package-lock
        fi
        
    - name: Build Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üî® Compilation des fonctions..."
        # Nettoyer le dossier lib avant la compilation
        rm -rf lib
        
        # Compiler avec TypeScript
        npm run build
        
        if [ $? -ne 0 ]; then
          echo "‚ùå ERREUR de compilation"
          exit 1
        fi
        
        # V√©rifier le contenu du dossier lib
        if [ ! -d "lib" ] || [ -z "$(ls -A lib 2>/dev/null)" ]; then
          echo "‚ùå Le dossier lib est vide ou n'existe pas apr√®s la compilation"
          ls -la
          exit 1
        fi
        
        echo "‚úÖ Build termin√© avec succ√®s"
        echo "üìÅ Structure du dossier lib:"
        find lib -type f | sort
        
        # Ex√©cuter le script pour copier les d√©pendances dans lib
        echo "üì¶ Copie des d√©pendances dans lib pour le d√©ploiement..."
        npm run copy-deps
        
        # V√©rification des d√©pendances copi√©es
        echo "üì¶ V√©rification des d√©pendances copi√©es:"
        if [ -d "lib/node_modules/firebase-admin" ]; then
          echo "‚úÖ firebase-admin est pr√©sent dans lib/node_modules"
          ls -la lib/node_modules/firebase-admin
        else
          echo "‚ùå ERREUR: firebase-admin manquant dans lib/node_modules"
          # Copie d'urgence
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-admin lib/node_modules/
        fi
        
        if [ -d "lib/node_modules/firebase-functions" ]; then
          echo "‚úÖ firebase-functions est pr√©sent dans lib/node_modules"
          ls -la lib/node_modules/firebase-functions
        else
          echo "‚ùå ERREUR: firebase-functions manquant dans lib/node_modules"
          # Copie d'urgence
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-functions lib/node_modules/
        fi
    
    - name: Configuration de Firebase
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Configuration de Firebase pour le projet ${{ inputs.project-id }}..."
        echo '{"projects": {"default": "${{ inputs.project-id }}"}}' > .firebaserc
    
    - name: D√©ploiement des Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ D√©ploiement des fonctions sur ${{ inputs.project-id }}..."
        
        # V√©rifier une derni√®re fois que le dossier lib et ses d√©pendances existent
        if [ ! -d "lib" ]; then
          echo "‚ùå Le dossier lib n'existe pas avant le d√©ploiement"
          exit 1
        fi
        
        # V√©rifier le contenu du dossier lib/node_modules
        echo "üì¶ Contenu de lib/node_modules avant d√©ploiement:"
        ls -la lib/node_modules
        
        # V√©rifier si firebase-admin est disponible dans lib/node_modules
        if [ ! -d "lib/node_modules/firebase-admin" ]; then
          echo "‚ö†Ô∏è firebase-admin n'est pas trouv√© dans lib/node_modules, copie en cours..."
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-admin lib/node_modules/
        fi
        
        # V√©rifier si firebase-functions est disponible dans lib/node_modules
        if [ ! -d "lib/node_modules/firebase-functions" ]; then
          echo "‚ö†Ô∏è firebase-functions n'est pas trouv√© dans lib/node_modules, copie en cours..."
          mkdir -p lib/node_modules
          cp -r node_modules/firebase-functions lib/node_modules/
        fi
        
        # Ajouter node_modules √† NODE_PATH pour s'assurer que les modules sont trouv√©s
        export NODE_PATH="$PWD/lib/node_modules:$NODE_PATH"
        echo "NODE_PATH=$NODE_PATH"
        
        # D√©terminer la cible de d√©ploiement
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          DEPLOY_TARGET="--only functions:v2"
          echo "D√©ploiement des functions v2"
        else
          DEPLOY_TARGET="--only functions"
          echo "D√©ploiement des functions standard"
        fi
        
        # D√©ployer avec le mode debug pour plus d'informations
        firebase deploy $DEPLOY_TARGET \
          --project ${{ inputs.project-id }} \
          --token "${{ inputs.firebase-token }}" \
          --non-interactive \
          --debug
