
name: "Build et d√©ploiement"
description: "Compile et d√©ploie les functions Firebase"

inputs:
  project-id:
    description: "ID du projet Firebase"
    required: true
  firebase-token:
    description: "Token Firebase CLI"
    required: true
  working-directory:
    description: "R√©pertoire de travail"
    required: true
  deploy-target:
    description: "Cible de d√©ploiement (functions ou functionsV2)"
    required: false
    default: "functions"

runs:
  using: "composite"
  steps:
    - name: Mise √† jour finale de Firebase CLI
      shell: bash
      run: |
        echo "üîß V√©rification finale de Firebase CLI avant d√©ploiement..."
        CLI_VERSION=$(firebase --version | cut -d' ' -f1)
        
        if [[ "$CLI_VERSION" != "13.0.2" ]]; then
          echo "‚ö†Ô∏è Version incorrecte d√©tect√©e: $CLI_VERSION. Installation forc√©e de Firebase CLI 13.0.2..."
          npm uninstall -g firebase-tools || true
          npm cache clean --force
          npm install -g firebase-tools@13.0.2 --force
          
          echo "Version apr√®s mise √† jour forc√©e:"
          firebase --version
          
          # V√©rification critique finale
          CLI_VERSION=$(firebase --version | cut -d' ' -f1)
          if [[ "$CLI_VERSION" != "13.0.2" ]]; then
            echo "‚ùå ERREUR CRITIQUE: Impossible d'installer la version correcte. Abandon."
            exit 1
          fi
        fi
        
        echo "‚úÖ Firebase CLI v13.0.2 correctement configur√©e"

    - name: Build Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üî® Compilation des fonctions..."
        
        # Nettoyage du dossier lib
        rm -rf lib
        mkdir -p lib
        
        # Compilation directe
        npm run build
        
        if [ $? -ne 0 ]; then
          echo "‚ùå ERREUR de compilation"
          exit 1
        fi
        
        # Cr√©ation d'un package.json complet dans lib avec toutes les d√©pendances
        echo "üì¶ Cr√©ation du package.json pour lib avec versions compatibles..."
        echo '{
          "main": "index.js",
          "dependencies": {
            "firebase-admin": "13.0.2",
            "firebase-functions": "6.3.1",
            "@google-cloud/storage": "7.15.0",
            "openai": "4.28.0",
            "cors": "2.8.5",
            "dotenv": "16.3.1",
            "node-fetch": "2.6.12",
            "form-data": "4.0.2"
          }
        }' > lib/package.json
        
        echo "‚úÖ Build termin√© avec succ√®s"
        echo "üìÑ package.json cr√©√© dans lib:"
        cat lib/package.json
        
        # Installation des d√©pendances directement dans le dossier lib
        echo "üì¶ Installation des d√©pendances dans le dossier lib..."
        cd lib
        npm install --production --no-optional --no-package-lock
        
        # V√©rification de l'installation des modules critiques
        if [ ! -d "node_modules/firebase-admin" ] || [ ! -d "node_modules/firebase-functions" ]; then
          echo "‚ö†Ô∏è Modules Firebase manquants, installation manuelle..."
          npm install firebase-admin@13.0.2 firebase-functions@6.3.1 --save --no-package-lock
        fi
        
        cd ..
        
        # Copie du fichier functions.yaml dans lib
        cp functions.yaml lib/
        
        # V√©rification des fichiers critiques
        if [ ! -f "lib/index.js" ]; then
          echo "‚ùå ERREUR: lib/index.js manquant!"
          exit 1
        fi
        
        echo "üìÇ Contenu final du dossier lib:"
        ls -la lib
        echo "üìÇ V√©rification des modules Firebase:"
        ls -la lib/node_modules/firebase-admin || echo "Module firebase-admin manquant!"
        ls -la lib/node_modules/firebase-functions || echo "Module firebase-functions manquant!"

    - name: Configuration finale de Firebase
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Configuration de Firebase pour le projet ${{ inputs.project-id }}..."
        echo "{\"projects\": {\"default\": \"${{ inputs.project-id }}\"}}" > .firebaserc
        
        # V√©rification que le fichier functions.yaml existe
        if [ ! -f "functions.yaml" ]; then
          echo "‚ùå functions.yaml manquant, cr√©ation..."
          echo "# Configuration Firebase Functions" > functions.yaml
          echo "specVersion: v1" >> functions.yaml
          echo "functions:" >> functions.yaml
          echo "  - source: ." >> functions.yaml
          if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
            echo "    codebase: v2" >> functions.yaml
          else
            echo "    codebase: default" >> functions.yaml
          fi
          echo "    runtime: nodejs20" >> functions.yaml
          echo "    memory: 1GB" >> functions.yaml
          echo "    timeout: 540s" >> functions.yaml
        fi
        
        echo "üìÑ Configuration functions.yaml finale:"
        cat functions.yaml
    
    - name: D√©ploiement avec CLI Firebase 13.0.2
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ D√©ploiement des fonctions sur ${{ inputs.project-id }}..."
        
        # Derni√®re v√©rification de CLI
        CLI_VERSION=$(firebase --version | cut -d' ' -f1)
        echo "Version Firebase CLI pour d√©ploiement: $CLI_VERSION"
        
        # Si version incorrecte, mise √† jour d'urgence
        if [[ "$CLI_VERSION" != "13.0.2" ]]; then
          echo "‚ö†Ô∏è Version Firebase CLI incorrecte, mise √† jour d'urgence..."
          npm uninstall -g firebase-tools || true
          npm cache clean --force
          npm install -g firebase-tools@13.0.2 --force
          firebase --version
        fi
        
        # D√©ploiement √† partir du dossier lib
        cd lib
        
        # Cr√©ation d'un .firebaserc minimal dans lib
        echo "{\"projects\": {\"default\": \"${{ inputs.project-id }}\"}}" > .firebaserc
        
        # D√©terminer la cible de d√©ploiement
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          DEPLOY_TARGET="functions:v2"
          echo "D√©ploiement des functions v2"
        else
          DEPLOY_TARGET="functions"
          echo "D√©ploiement des functions standard"
        fi
        
        # D√©ploiement avec debug complet
        echo "üîç Ex√©cution du d√©ploiement Firebase avec debug activ√©..."
        firebase deploy --only ${DEPLOY_TARGET} \
          --project ${{ inputs.project-id }} \
          --token "${{ inputs.firebase-token }}" \
          --non-interactive \
          --debug
