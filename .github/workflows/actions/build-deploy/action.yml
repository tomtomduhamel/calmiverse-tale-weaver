
name: "Build et déploiement"
description: "Compile et déploie les functions Firebase"

inputs:
  project-id:
    description: "ID du projet Firebase"
    required: true
  firebase-token:
    description: "Token Firebase CLI"
    required: true
  working-directory:
    description: "Répertoire de travail"
    required: true
  deploy-target:
    description: "Cible de déploiement (functions ou functionsV2)"
    required: false
    default: "functions"

runs:
  using: "composite"
  steps:
    - name: Vérification de l'environnement
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Vérification de l'environnement de build..."
        echo "📦 Version de Node.js: $(node -v)"
        echo "📦 Version de npm: $(npm -v)"
        
        if [ ! -f "package.json" ]; then
          echo "❌ package.json non trouvé dans $(pwd)"
          exit 1
        fi

    - name: Installation et mise à jour de Firebase CLI
      shell: bash
      run: |
        echo "🔧 Installation de la dernière version de Firebase CLI..."
        npm uninstall -g firebase-tools
        npm install -g firebase-tools@latest --force
        firebase --version
        
        # Vérification que la version CLI est suffisamment récente
        FIREBASE_CLI_VERSION=$(firebase --version)
        echo "Version de Firebase CLI installée: $FIREBASE_CLI_VERSION"

    - name: Build Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔨 Compilation des fonctions..."
        # Nettoyer le dossier lib avant la compilation
        rm -rf lib
        
        # Compiler avec TypeScript
        npm run build
        
        if [ $? -ne 0 ]; then
          echo "❌ ERREUR de compilation"
          exit 1
        fi
        
        # Copier les dépendances et créer package.json simplifié
        echo "📦 Copie des dépendances dans lib..."
        npm run copy-deps || echo "Aucun script copy-deps trouvé, progression..."
        
        # Vérification des dépendances copiées
        if [ -f "lib/package.json" ]; then
          echo "✅ lib/package.json existe déjà"
        else
          echo "⚠️ Création de package.json simplifié dans lib..."
          FIREBASE_ADMIN_VERSION=$(npm list firebase-admin --json | grep -o '"version":"[^"]*"' | cut -d'"' -f4 || echo "13.0.2")
          FIREBASE_FUNCTIONS_VERSION=$(npm list firebase-functions --json | grep -o '"version":"[^"]*"' | cut -d'"' -f4 || echo "6.3.1")
          
          echo "{\"main\": \"index.js\", \"dependencies\": {\"firebase-admin\": \"^${FIREBASE_ADMIN_VERSION}\", \"firebase-functions\": \"^${FIREBASE_FUNCTIONS_VERSION}\"}}" > lib/package.json
        fi

    - name: Configuration de Firebase
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Configuration de Firebase pour le projet ${{ inputs.project-id }}..."
        echo "{\"projects\": {\"default\": \"${{ inputs.project-id }}\"}}" > .firebaserc
    
    - name: Déploiement des Functions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Déploiement des fonctions sur ${{ inputs.project-id }}..."
        
        # Ajouter node_modules à NODE_PATH pour s'assurer que les modules sont trouvés
        export NODE_PATH="$PWD/lib/node_modules:$NODE_PATH"
        echo "NODE_PATH=$NODE_PATH"
        
        # Déterminer la cible de déploiement
        if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
          DEPLOY_TARGET="--only functions:v2"
          echo "Déploiement des functions v2"
        else
          DEPLOY_TARGET="--only functions"
          echo "Déploiement des functions standard"
        fi
        
        # Vérifier l'existence de functions.yaml
        if [ -f "functions.yaml" ]; then
          echo "📄 functions.yaml trouvé:"
          cat functions.yaml
        else
          echo "⚠️ functions.yaml non trouvé, création..."
          echo "# Configuration Firebase Functions" > functions.yaml
          echo "specVersion: v1" >> functions.yaml
          echo "functions:" >> functions.yaml
          echo "  - source: ." >> functions.yaml
          if [ "${{ inputs.deploy-target }}" = "functionsV2" ]; then
            echo "    codebase: v2" >> functions.yaml
          else
            echo "    codebase: default" >> functions.yaml
          fi
          echo "    runtime: nodejs20" >> functions.yaml
          echo "    memory: 1GB" >> functions.yaml
          echo "    timeout: 540s" >> functions.yaml
        fi
        
        # Déployer avec la Firebase CLI mise à jour
        firebase deploy $DEPLOY_TARGET \
          --project ${{ inputs.project-id }} \
          --token "${{ inputs.firebase-token }}" \
          --non-interactive \
          --debug
