
name: D√©ploiement des Functions v2
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environnement de d√©ploiement"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      
      - name: Configuration de Node.js
        uses: ./.github/workflows/actions/setup-node
      
      - name: V√©rification de l'installation de Node.js
        run: |
          node -v
          npm -v
      
      - name: Pr√©paration de l'environnement de d√©ploiement
        working-directory: functions-v2
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
          echo "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT || 'calmi-99482' }}" >> .env
          echo "Variables d'environnement configur√©es avec succ√®s"
      
      - name: Installation explicite des d√©pendances critiques
        working-directory: functions-v2
        run: |
          rm -rf node_modules
          rm -f package-lock.json
          echo "üì¶ Installation explicite de firebase-admin et firebase-functions..."
          npm install firebase-admin firebase-functions --no-package-lock
          mkdir -p node_modules
          ls -la node_modules/firebase-admin || echo "firebase-admin non install√©"
          ls -la node_modules/firebase-functions || echo "firebase-functions non install√©"
          
          # V√©rification suppl√©mentaire
          if [ ! -d "node_modules/firebase-admin" ] || [ ! -d "node_modules/firebase-functions" ]; then
            echo "‚ö†Ô∏è R√©installation des d√©pendances critiques..."
            npm install firebase-admin@latest firebase-functions@latest --no-package-lock
          fi
      
      - name: Installation des d√©pendances
        working-directory: functions-v2
        run: |
          npm install --no-package-lock
          
          # V√©rification que les d√©pendances critiques sont install√©es
          echo "üì¶ V√©rification des d√©pendances critiques..."
          ls -la node_modules/firebase-admin || echo "firebase-admin manquant, installation..."
          ls -la node_modules/firebase-functions || echo "firebase-functions manquant, installation..."
          
          # Assurer que les d√©pendances critiques sont pr√©sentes
          if [ ! -d "node_modules/firebase-admin" ]; then
            npm install firebase-admin@latest --no-package-lock
          fi
          
          if [ ! -d "node_modules/firebase-functions" ]; then
            npm install firebase-functions@latest --no-package-lock
          fi
          
          echo "üì¶ Liste des d√©pendances principales install√©es:"
          npm list --depth=0 firebase-admin firebase-functions
      
      - name: Configuration du compte de service Firebase
        uses: ./.github/workflows/actions/setup-firebase-service
        with:
          firebase-service-account: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
      
      - name: Installation de Firebase CLI
        run: npm install -g firebase-tools@latest
      
      - name: Build et pr√©paration pour le d√©ploiement
        working-directory: functions-v2
        run: |
          # Nettoyage du r√©pertoire lib s'il existe
          rm -rf lib
          
          # Compilation du code
          echo "üî® Compilation du code..."
          npm run build
          
          # V√©rification que le r√©pertoire lib existe apr√®s la compilation
          if [ ! -d "lib" ]; then
            echo "‚ùå Erreur: Le r√©pertoire lib n'a pas √©t√© cr√©√© pendant la compilation"
            exit 1
          fi
          
          # Copie des d√©pendances dans lib
          echo "üì¶ Copie des d√©pendances dans lib..."
          npm run copy-deps
          
          # V√©rification des d√©pendances copi√©es
          echo "üì¶ V√©rification des d√©pendances dans lib/node_modules:"
          ls -la lib/node_modules || echo "‚ö†Ô∏è lib/node_modules n'existe pas"
          
          # V√©rification explicite de firebase-admin et firebase-functions
          if [ ! -d "lib/node_modules/firebase-admin" ]; then
            echo "‚ö†Ô∏è firebase-admin manquant dans lib/node_modules, copie manuelle..."
            mkdir -p lib/node_modules
            cp -r node_modules/firebase-admin lib/node_modules/
          else
            echo "‚úÖ firebase-admin pr√©sent dans lib/node_modules"
          fi
          
          if [ ! -d "lib/node_modules/firebase-functions" ]; then
            echo "‚ö†Ô∏è firebase-functions manquant dans lib/node_modules, copie manuelle..."
            mkdir -p lib/node_modules
            cp -r node_modules/firebase-functions lib/node_modules/
          else
            echo "‚úÖ firebase-functions pr√©sent dans lib/node_modules"
          fi
          
          # V√©rification du fichier index.js
          if [ ! -f "lib/index.js" ]; then
            echo "‚ùå Erreur: lib/index.js n'existe pas apr√®s la compilation"
            exit 1
          else
            echo "‚úÖ lib/index.js pr√©sent"
          fi
          
          echo "‚úÖ Pr√©paration pour le d√©ploiement termin√©e"
      
      - name: D√©ploiement des Functions v2
        working-directory: functions-v2
        run: |
          echo "üöÄ D√©ploiement des functions v2 sur ${{ secrets.GOOGLE_CLOUD_PROJECT || 'calmi-99482' }}..."
          
          # Configuration du NODE_PATH pour aider √† trouver les modules
          export NODE_PATH="$PWD/lib/node_modules:$NODE_PATH"
          echo "NODE_PATH=$NODE_PATH"
          
          # D√©ploiement avec debug
          firebase deploy --only functions:v2 \
            --project ${{ secrets.GOOGLE_CLOUD_PROJECT || 'calmi-99482' }} \
            --token "${{ secrets.FIREBASE_TOKEN }}" \
            --debug
