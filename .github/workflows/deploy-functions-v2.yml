
name: Deploy Firebase Functions v2
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Vérifier structure du projet
        run: |
          echo "Structure du dossier functions-v2:"
          ls -la functions-v2/
          echo "package.json:"
          cat functions-v2/package.json
      
      - name: Clean installation
        run: |
          cd functions-v2
          rm -rf node_modules lib
          rm -f package-lock.json
          echo "Nettoyage complet effectué"
      
      - name: Installation des dépendances
        run: |
          cd functions-v2
          # Utiliser npm install au lieu de npm ci
          npm install --no-package-lock
          echo "Dépendances installées avec succès"
          echo "Liste des dépendances installées:"
          npm list --depth=0
        
      - name: Vérification des dépendances
        run: |
          cd functions-v2
          echo "Vérification de firebase-functions:"
          npm list firebase-functions || true
          echo "Vérification de firebase-admin:"
          npm list firebase-admin || true
          echo "Vérification d'OpenAI:"
          npm list openai || true
          echo "Vérification des autres dépendances:"
          npm list @google-cloud/secret-manager || true
          npm list form-data || true
          npm list node-fetch || true
        
      - name: Setup Environment Variables
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT || 'calmi-99482' }}
        run: |
          cd functions-v2
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" > .env
          echo "GOOGLE_CLOUD_PROJECT=$GOOGLE_CLOUD_PROJECT" >> .env
          
          # Debug info (sans afficher les valeurs sensibles)
          echo "Variables d'environnement configurées:"
          echo "GOOGLE_CLOUD_PROJECT: $GOOGLE_CLOUD_PROJECT"
          echo "OPENAI_API_KEY présente: ${{ secrets.OPENAI_API_KEY != '' }}"
      
      - name: Setup Firebase service account
        id: setup-firebase
        run: |
          # Vérification des variables disponibles
          echo "Vérification des secrets disponibles..."
          echo "FIREBASE_TOKEN présent: ${{ secrets.FIREBASE_TOKEN != '' }}"
          echo "FIREBASE_SERVICE_ACCOUNT présent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT != '' }}"
          echo "GOOGLE_APPLICATION_CREDENTIALS_JSON présent: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON != '' }}"
          
          # Utiliser GOOGLE_APPLICATION_CREDENTIALS_JSON si FIREBASE_SERVICE_ACCOUNT n'est pas disponible
          if [ "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" != "" ]; then
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > /tmp/firebase-service-account.json
            echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/firebase-service-account.json" >> $GITHUB_ENV
            echo "service_account_path=/tmp/firebase-service-account.json" >> $GITHUB_OUTPUT
            echo "✅ Compte de service Firebase configuré via FIREBASE_SERVICE_ACCOUNT"
          elif [ "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" != "" ]; then
            echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > /tmp/firebase-service-account.json
            echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/firebase-service-account.json" >> $GITHUB_ENV
            echo "service_account_path=/tmp/firebase-service-account.json" >> $GITHUB_OUTPUT
            echo "✅ Compte de service Firebase configuré via GOOGLE_APPLICATION_CREDENTIALS_JSON"
          else
            echo "❌ ERREUR: Aucun compte de service Firebase configuré"
            echo "Veuillez configurer soit FIREBASE_SERVICE_ACCOUNT soit GOOGLE_APPLICATION_CREDENTIALS_JSON"
            exit 1
          fi
      
      - name: Build Functions v2
        run: |
          cd functions-v2
          npm run build
          echo "Build des fonctions terminé"
          echo "Contenu du dossier lib:"
          ls -la lib/
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest
      
      - name: Deploy only Firebase Functions v2
        run: |
          cd functions-v2
          # Afficher les variables d'environnement disponibles (sans valeurs sensibles)
          echo "GOOGLE_APPLICATION_CREDENTIALS défini: $(if [ -n "$GOOGLE_APPLICATION_CREDENTIALS" ]; then echo "Oui"; else echo "Non"; fi)"
          echo "Contenu du fichier de service:"
          if [ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
            jq 'keys' "$GOOGLE_APPLICATION_CREDENTIALS" || echo "Impossible de lire le fichier JSON"
          else
            echo "Fichier de service n'existe pas"
          fi
          
          # Essayer le déploiement en mode détaillé
          firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}" --only functions:v2 --project ${{ secrets.GOOGLE_CLOUD_PROJECT || 'calmi-99482' }} --debug
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.setup-firebase.outputs.service_account_path }}
