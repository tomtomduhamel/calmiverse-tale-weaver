
import { useEffect, useRef } from "react";
import { useNotificationCenter } from "@/hooks/useNotificationCenter";
import { errorManager } from "@/utils/errorHandling/errorNotificationManager";
import { logger } from "@/utils/logger";

/**
 * Composant pour √©couter et afficher les erreurs globales de mani√®re centralis√©e
 * Ce composant doit √™tre mont√© une fois au niveau racine de l'application
 */
export function ErrorListener() {
  const { notify, notifyError, notifyWarning } = useNotificationCenter();
  const mountTimeRef = useRef(new Date());
  const errorCountRef = useRef({ validation: 0, other: 0 });
  
  useEffect(() => {
    logger.debug("[ErrorListener] üîÑ Initialisation √†", mountTimeRef.current.toISOString());
    
    // Configurer le gestionnaire d'erreurs global avec notre syst√®me de notification
    errorManager.initWithNotificationCenter(notify);
    
    logger.info("[ErrorListener] ‚úÖ Gestionnaire d'erreurs initialis√© avec le centre de notification");
    
    // √âcouter les erreurs sp√©cifiques au formulaire d'histoire
    const handleStoryFormError = (event: CustomEvent) => {
      const { type, message, source, timestamp } = event.detail;
      
      if (type === 'validation') {
        errorCountRef.current.validation++;
        notifyWarning("Validation", message);
      } else {
        errorCountRef.current.other++;
        notifyError("Erreur", message);
      }
      
      logger.warn("[ErrorListener] ‚ùå Erreur de formulaire d'histoire trait√©e:", {
        type,
        message,
        source: source || 'non sp√©cifi√©',
        timestamp: timestamp || new Date().toISOString(),
        compteurValidation: errorCountRef.current.validation,
        compteurAutres: errorCountRef.current.other
      });
    };
    
    // S'abonner aux √©v√©nements d'erreur sp√©cifiques
    document.addEventListener('story-form-error', handleStoryFormError as EventListener);
    
    // Nettoyer lors du d√©montage
    return () => {
      document.removeEventListener('story-form-error', handleStoryFormError as EventListener);
      logger.debug("[ErrorListener] üßπ Nettoyage - gestionnaire d'erreurs d√©mont√© apr√®s", {
        dur√©eVieMs: new Date().getTime() - mountTimeRef.current.getTime(),
        erreursValidation: errorCountRef.current.validation,
        autresErreurs: errorCountRef.current.other
      });
    };
  }, [notify, notifyError, notifyWarning]);
  
  // Ce composant ne rend rien visuellement
  return null;
}
