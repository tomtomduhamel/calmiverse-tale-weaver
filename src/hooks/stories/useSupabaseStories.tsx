
import { useCallback } from 'react';
import { useStoriesQuery } from './useStoriesQuery';
import { useStoryCreation } from './useStoryCreation';
import { useStoryDeletion } from './useStoryDeletion';
import { useStoryUpdate } from './useStoryUpdate';
import { useStoryCloudFunctions } from './useStoryCloudFunctions';
import { usePendingStoryMonitor } from './monitoring/usePendingStoryMonitor';
import { useRealtimeStoryMonitor } from './useRealtimeStoryMonitor';
import { useStoryFavorites } from './useStoryFavorites';
import { useToast } from "@/hooks/use-toast";
import { useSupabaseAuth } from '@/contexts/SupabaseAuthContext';

/**
 * Hook principal pour g√©rer les histoires avec Supabase
 * Maintenant avec monitoring en temps r√©el et gestion des favoris int√©gr√©e
 */
export const useSupabaseStories = () => {
  const { toast } = useToast();
  const { user } = useSupabaseAuth();
  
  // Utilisation des hooks sp√©cialis√©s
  const { stories, isLoading, error, fetchStories } = useStoriesQuery();
  const { createStory } = useStoryCreation();
  const { deleteStory } = useStoryDeletion();
  const { updateStoryStatus } = useStoryUpdate();
  const { retryStoryGeneration } = useStoryCloudFunctions();
  const { toggleFavorite, getFavoriteStories, isUpdating: isUpdatingFavorite } = useStoryFavorites();
  
  // Surveillance am√©lior√©e des histoires en attente (fallback)
  const pendingMonitor = usePendingStoryMonitor({
    stories,
    fetchStories,
    onStoryCompleted: (story) => {
      console.log(`[SupabaseStories] Histoire compl√©t√©e: ${story.id}`);
      // Rafra√Æchir les donn√©es pour s'assurer d'avoir la derni√®re version
      fetchStories();
    }
  });

  // Monitoring en temps r√©el principal
  const realtimeMonitor = useRealtimeStoryMonitor({
    onStoryCreated: (story) => {
      console.log(`[SupabaseStories] Histoire cr√©√©e d√©tect√©e en temps r√©el: ${story.id}`);
      // Rafra√Æchir imm√©diatement les donn√©es
      fetchStories();
    },
    enabled: true
  });
  
  // Gestion des favoris avec rafra√Æchissement automatique
  const handleToggleFavorite = useCallback(async (storyId: string, currentFavoriteStatus: boolean): Promise<boolean> => {
    const success = await toggleFavorite(storyId, currentFavoriteStatus);
    if (success) {
      // Rafra√Æchir la liste des histoires pour refl√©ter le changement
      await fetchStories();
    }
    return success;
  }, [toggleFavorite, fetchStories]);
  
  // Cr√©ation d'une histoire avec gestion d'erreur centralis√©e et surveillance automatique
  const handleCreateStory = useCallback(async (formData: { childrenIds: string[], objective: string }, children: any[] = []) => {
    if (!user) {
      toast({
        title: "Erreur",
        description: "Vous devez √™tre connect√© pour cr√©er une histoire",
        variant: "destructive",
      });
      throw new Error("Utilisateur non connect√©");
    }
    
    try {
      console.log('üöÄ Starting enhanced story creation process...', { formData, currentUser: user.id });
      const result = await createStory(formData, children);
      
      // Extraire l'ID de l'histoire du r√©sultat
      const storyId = result.storyId;
      
      // D√©marrer la surveillance en temps r√©el en priorit√©
      realtimeMonitor.startMonitoring();
      
      // D√©marrer la surveillance de fallback
      pendingMonitor.setPendingStoryId(storyId);
      
      toast({
        title: "G√©n√©ration en cours",
        description: "Nous commen√ßons √† g√©n√©rer votre histoire. Surveillance en temps r√©el activ√©e.",
      });
      
      return storyId;
    } catch (error: any) {
      console.error('‚ùå Error during enhanced story creation:', error);
      toast({
        title: "Erreur",
        description: error instanceof Error ? error.message : "Impossible de cr√©er l'histoire",
        variant: "destructive",
      });
      throw error;
    }
  }, [user, createStory, toast, pendingMonitor, realtimeMonitor]);

  // Fonction pour forcer le rafra√Æchissement avec v√©rification de sant√©
  const forceRefresh = useCallback(async () => {
    console.log('[SupabaseStories] Force refresh des histoires');
    try {
      await fetchStories();
      toast({
        title: "Actualisation",
        description: "La liste des histoires a √©t√© mise √† jour",
      });
    } catch (error: any) {
      console.error('[SupabaseStories] Erreur lors du rafra√Æchissement:', error);
      toast({
        title: "Erreur",
        description: "Impossible de rafra√Æchir la liste des histoires",
        variant: "destructive",
      });
    }
  }, [fetchStories, toast]);

  return {
    stories,
    isLoading,
    error,
    fetchStories,
    forceRefresh,
    createStory: handleCreateStory,
    deleteStory,
    updateStoryStatus,
    retryStoryGeneration,
    // Nouvelles fonctionnalit√©s de favoris
    toggleFavorite: handleToggleFavorite,
    getFavoriteStories,
    isUpdatingFavorite,
    // Exposer les fonctionnalit√©s de surveillance (fallback)
    pendingStoryId: pendingMonitor.pendingStoryId,
    isMonitoring: pendingMonitor.isMonitoring || realtimeMonitor.isMonitoring,
    lastCheck: pendingMonitor.lastCheck,
    stopMonitoring: () => {
      pendingMonitor.stopMonitoring();
      realtimeMonitor.stopMonitoring();
    },
    // Nouvelles fonctionnalit√©s de monitoring temps r√©el
    startRealtimeMonitoring: realtimeMonitor.startMonitoring,
    isRealtimeMonitoring: realtimeMonitor.isMonitoring,
    lastDetectedStory: realtimeMonitor.lastDetectedStory
  };
};

export default useSupabaseStories;
