
import { useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useSupabaseAuth } from '@/contexts/SupabaseAuthContext';

/**
 * Hook pour g√©rer la cr√©ation des histoires avec diagnostic approfondi
 */
export const useStoryCreation = () => {
  const { user } = useSupabaseAuth();

  /**
   * Cr√©er une nouvelle histoire avec diagnostic d√©taill√©
   */
  const createStory = useCallback(async (formData: { childrenIds: string[], objective: string }, children: any[] = []) => {
    console.log('üöÄ [useStoryCreation] D√©but de la cr√©ation d\'histoire');
    console.log('üìã [useStoryCreation] FormData re√ßu:', JSON.stringify(formData, null, 2));
    console.log('üë• [useStoryCreation] Children disponibles:', children?.length || 0);
    console.log('üë§ [useStoryCreation] Utilisateur connect√©:', user?.id || 'NON CONNECT√â');

    if (!user) {
      console.error('‚ùå [useStoryCreation] ERREUR: Utilisateur non connect√©');
      throw new Error("Utilisateur non connect√©");
    }

    try {
      const selectedChildren = children.filter(child => formData.childrenIds.includes(child.id));
      const childrenNames = selectedChildren.map(child => child.name);
      
      console.log('‚úÖ [useStoryCreation] Enfants s√©lectionn√©s:', childrenNames);
      
      if (!formData.objective) {
        console.error('‚ùå [useStoryCreation] ERREUR: Objectif manquant');
        throw new Error("L'objectif de l'histoire est obligatoire");
      }
      
      if (childrenNames.length === 0) {
        console.error('‚ùå [useStoryCreation] ERREUR: Aucun enfant s√©lectionn√©');
        throw new Error("Veuillez s√©lectionner au moins un enfant pour cr√©er une histoire");
      }
      
      console.log('üìù [useStoryCreation] Insertion de l\'histoire en base...');
      
      // Ins√©rer l'histoire avec le statut "en attente"
      const { data: story, error: insertError } = await supabase
        .from('stories')
        .insert({
          title: `Histoire pour ${childrenNames.join(' et ')} - En cr√©ation...`,
          content: '',
          summary: '',
          preview: 'G√©n√©ration en cours...',
          status: 'pending',
          childrenids: formData.childrenIds,
          childrennames: childrenNames,
          objective: formData.objective,
          authorid: user.id,
          createdat: new Date().toISOString(),
          updatedat: new Date().toISOString()
        })
        .select()
        .single();
        
      if (insertError) {
        console.error('‚ùå [useStoryCreation] ERREUR lors de l\'insertion:', insertError);
        throw insertError;
      }
      
      console.log('‚úÖ [useStoryCreation] Histoire cr√©√©e avec ID:', story.id);
      console.log('üìû [useStoryCreation] Appel de la fonction generateStory...');
      
      // Pr√©parer les donn√©es pour la fonction edge
      const functionPayload = {
        storyId: story.id,
        objective: formData.objective,
        childrenNames: childrenNames
      };
      
      console.log('üì¶ [useStoryCreation] Payload pour generateStory:', JSON.stringify(functionPayload, null, 2));
      
      // V√©rifier la session avant l'appel
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      if (sessionError || !session) {
        console.error('‚ùå [useStoryCreation] ERREUR de session:', sessionError);
        throw new Error('Session expir√©e, veuillez vous reconnecter');
      }
      
      console.log('üîë [useStoryCreation] Session valide, token pr√©sent:', !!session.access_token);
      
      // Appeler la fonction edge avec timeout et logging d√©taill√©
      console.log('‚è±Ô∏è [useStoryCreation] D√©but de l\'appel √† generateStory √†', new Date().toISOString());
      
      const startTime = Date.now();
      const { data: functionData, error: functionError } = await Promise.race([
        supabase.functions.invoke('generateStory', {
          body: functionPayload,
        }),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout de 60 secondes d√©pass√©')), 60000)
        )
      ]) as any;
      
      const endTime = Date.now();
      console.log(`‚è±Ô∏è [useStoryCreation] Appel termin√© en ${endTime - startTime}ms`);
      
      if (functionError) {
        console.error('‚ùå [useStoryCreation] ERREUR de la fonction edge:', functionError);
        console.error('üìã [useStoryCreation] D√©tails de l\'erreur:', JSON.stringify(functionError, null, 2));
        
        // Mettre √† jour l'histoire avec le statut d'erreur
        await supabase
          .from('stories')
          .update({
            status: 'error',
            error: `Erreur generateStory: ${functionError.message || 'Erreur inconnue'}`,
            updatedat: new Date().toISOString()
          })
          .eq('id', story.id);
          
        throw new Error(`√âchec de la g√©n√©ration: ${functionError.message || 'Erreur inconnue'}`);
      }
      
      console.log('‚úÖ [useStoryCreation] Fonction appel√©e avec succ√®s:', functionData);
      console.log('üéâ [useStoryCreation] Histoire cr√©√©e et g√©n√©ration lanc√©e pour ID:', story.id);
      
      return story.id;
    } catch (error: any) {
      console.error('üí• [useStoryCreation] ERREUR GLOBALE:', error);
      console.error('üìã [useStoryCreation] Stack trace:', error.stack);
      throw error;
    }
  }, [user]);

  return {
    createStory
  };
};
