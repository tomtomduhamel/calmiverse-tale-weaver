
import { useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useSupabaseAuth } from '@/contexts/SupabaseAuthContext';
import { createStoryData } from './storyFormatters';

export const useStoryCreation = () => {
  const { toast } = useToast();
  const { user } = useSupabaseAuth();

  const createStory = useCallback(async (formData: { childrenIds: string[], objective: string }, children: any[] = []) => {
    if (!user) {
      throw new Error("Utilisateur non connect√©");
    }

    try {
      console.log('üöÄ D√©marrage du processus de cr√©ation d\'histoire...', {
        formData,
        currentUser: user.id
      });
      
      // Validation des donn√©es
      const selectedChildren = children.filter(child => formData.childrenIds.includes(child.id));
      const childrenNames = selectedChildren.map(child => child.name);
      
      console.log('Enfants s√©lectionn√©s pour l\'histoire:', childrenNames);
      
      if (!formData.objective) {
        throw new Error("L'objectif de l'histoire est obligatoire");
      }
      
      if (childrenNames.length === 0) {
        throw new Error("Veuillez s√©lectionner au moins un enfant pour cr√©er une histoire");
      }
      
      // Cr√©er l'histoire avec statut en attente
      const storyData = {
        title: `Histoire pour ${childrenNames.join(' et ')}`,
        content: '',
        summary: 'G√©n√©ration en cours...',
        preview: 'Histoire en cours de cr√©ation...',
        status: 'pending',
        childrenids: formData.childrenIds,
        childrennames: childrenNames,
        objective: formData.objective,
        authorid: user.id,
        createdat: new Date().toISOString(),
        updatedat: new Date().toISOString()
      };

      console.log('Cr√©ation de l\'enregistrement initial dans la base de donn√©es...');
      const { data, error } = await supabase
        .from('stories')
        .insert(storyData)
        .select('id')
        .single();
      
      if (error) {
        console.error("Erreur lors de l'insertion dans la base de donn√©es:", error);
        throw new Error(`Erreur lors de la cr√©ation de l'enregistrement: ${error.message}`);
      }
      
      const storyId = data.id;
      console.log('Document d\'histoire initial cr√©√© avec l\'ID:', storyId);
      
      // Appeler la fonction edge pour g√©n√©rer l'histoire
      toast({
        title: "Cr√©ation en cours",
        description: "G√©n√©ration de l'histoire en cours...",
      });
      
      console.log('Appel de la fonction Edge generateStory...');
      
      try {
        const { data: generationData, error: generationError } = await supabase.functions.invoke('generateStory', {
          body: {
            storyId: storyId,
            objective: formData.objective,
            childrenNames: childrenNames
          }
        });
        
        if (generationError) {
          console.error('Erreur lors de l\'appel √† la fonction de g√©n√©ration d\'histoire:', generationError);
          
          // Mettre √† jour l'histoire avec une erreur
          await supabase
            .from('stories')
            .update({
              status: 'error',
              error: generationError.message || 'Erreur lors de la g√©n√©ration',
              updatedat: new Date().toISOString()
            })
            .eq('id', storyId);
          
          toast({
            title: "Erreur de g√©n√©ration",
            description: generationError.message || "La g√©n√©ration de l'histoire a √©chou√©",
            variant: "destructive",
          });
          
          throw generationError;
        } else {
          console.log('G√©n√©ration d\'histoire termin√©e avec succ√®s:', generationData);
          
          // V√©rifier si la g√©n√©ration a r√©ussi
          if (!generationData || !generationData.success) {
            const errorMessage = generationData?.message || "√âchec de la g√©n√©ration pour une raison inconnue";
            console.error('√âchec de la g√©n√©ration:', errorMessage);
            
            throw new Error(errorMessage);
          }
          
          // R√©cup√©rer l'histoire compl√®te pour la retourner
          const { data: completedStory, error: fetchError } = await supabase
            .from('stories')
            .select('*')
            .eq('id', storyId)
            .maybeSingle();
            
          if (fetchError) {
            console.error('Erreur lors de la r√©cup√©ration de l\'histoire compl√©t√©e:', fetchError);
            throw new Error(`Erreur lors de la r√©cup√©ration de l'histoire: ${fetchError.message}`);
          }
          
          if (!completedStory) {
            console.error('Histoire non trouv√©e apr√®s g√©n√©ration');
            throw new Error("L'histoire n'a pas √©t√© trouv√©e apr√®s g√©n√©ration");
          }
          
          toast({
            title: "Histoire g√©n√©r√©e",
            description: "Votre histoire est maintenant disponible dans votre biblioth√®que.",
          });
          
          return { storyId, storyData: completedStory };
        }
      } catch (invokeError: any) {
        console.error('Erreur lors de l\'appel √† la fonction Edge:', invokeError);
        
        // V√©rifier si l'erreur est d√©j√† en format d'objet
        const errorMessage = typeof invokeError === 'object' && invokeError.message 
          ? invokeError.message 
          : String(invokeError);
        
        // Mettre √† jour le statut de l'histoire avec l'erreur
        await supabase
          .from('stories')
          .update({
            status: 'error',
            error: errorMessage,
            updatedat: new Date().toISOString()
          })
          .eq('id', storyId);
        
        toast({
          title: "Erreur",
          description: errorMessage,
          variant: "destructive",
        });
        
        throw new Error(errorMessage);
      }
    } catch (error: any) {
      console.error('‚ùå Erreur durant la cr√©ation d\'histoire:', error);
      
      toast({
        title: "Erreur",
        description: error instanceof Error 
          ? error.message 
          : "Impossible de cr√©er l'histoire",
        variant: "destructive",
      });
      
      throw error;
    }
  }, [user, toast]);

  return {
    createStory
  };
};
