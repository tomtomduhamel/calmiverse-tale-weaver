
import { useCallback, useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useSupabaseAuth } from '@/contexts/SupabaseAuthContext';

interface FallbackStoryParams {
  objective: string;
  childrenNames: string[];
  storyId?: string;
}

export const usePostgreSQLFallback = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();
  const { user } = useSupabaseAuth();

  const generateStoryWithFallback = useCallback(async (params: FallbackStoryParams) => {
    if (!user) {
      throw new Error("Utilisateur non authentifi√© pour le fallback PostgreSQL");
    }

    setIsGenerating(true);
    
    try {
      console.log('üêò [PostgreSQL Fallback] D√©but g√©n√©ration histoire fallback avec RLS corrig√©');
      
      const { objective, childrenNames, storyId } = params;
      
      // √âtape 1: Cr√©er ou mettre √† jour l'histoire en base avec authorid explicite
      let currentStoryId = storyId;
      
      if (!currentStoryId) {
        console.log('üêò [PostgreSQL Fallback] Cr√©ation nouvelle histoire avec authorid:', user.id);
        
        const { data: newStory, error: insertError } = await supabase
          .from('stories')
          .insert({
            title: `Histoire en cours pour ${childrenNames.join(' et ')}`,
            content: '',
            summary: 'G√©n√©ration en cours via PostgreSQL fallback...',
            preview: 'Histoire en cours de g√©n√©ration...',
            status: 'pending',
            objective,
            childrennames: childrenNames,
            authorid: user.id // Explicitement d√©finir l'authorid pour RLS
          })
          .select()
          .single();
          
        if (insertError) {
          console.error('üêò [PostgreSQL Fallback] Erreur insertion:', insertError);
          throw new Error(`Erreur cr√©ation histoire: ${insertError.message}`);
        }
        
        currentStoryId = newStory.id;
        console.log('üêò [PostgreSQL Fallback] Histoire cr√©√©e avec succ√®s:', currentStoryId);
      } else {
        console.log('üêò [PostgreSQL Fallback] Mise √† jour histoire existante:', currentStoryId);
        
        // V√©rifier que l'histoire appartient √† l'utilisateur
        const { data: existingStory, error: fetchError } = await supabase
          .from('stories')
          .select('id, authorid')
          .eq('id', currentStoryId)
          .single();
          
        if (fetchError || !existingStory) {
          throw new Error(`Histoire ${currentStoryId} introuvable`);
        }
        
        if (existingStory.authorid !== user.id) {
          throw new Error(`Acc√®s non autoris√© √† l'histoire ${currentStoryId}`);
        }
      }
      
      // √âtape 2: G√©n√©rer le contenu via fallback client-side
      console.log('üêò [PostgreSQL Fallback] G√©n√©ration contenu pour:', { objective, childrenNames });
      const fallbackContent = await generateContentClientSide(objective, childrenNames);
      
      // √âtape 3: Mettre √† jour l'histoire avec le contenu g√©n√©r√©
      console.log('üêò [PostgreSQL Fallback] Mise √† jour histoire avec contenu g√©n√©r√©');
      const { error: updateError } = await supabase
        .from('stories')
        .update({
          title: fallbackContent.title,
          content: fallbackContent.content,
          summary: fallbackContent.summary,
          preview: fallbackContent.preview,
          status: 'completed',
          updatedat: new Date().toISOString()
        })
        .eq('id', currentStoryId)
        .eq('authorid', user.id); // Double v√©rification RLS
        
      if (updateError) {
        console.error('üêò [PostgreSQL Fallback] Erreur mise √† jour:', updateError);
        throw new Error(`Erreur mise √† jour histoire: ${updateError.message}`);
      }
      
      console.log('‚úÖ [PostgreSQL Fallback] Histoire g√©n√©r√©e avec succ√®s:', currentStoryId);
      
      toast({
        title: "Histoire g√©n√©r√©e avec succ√®s",
        description: "Syst√®me de fallback PostgreSQL utilis√© avec RLS s√©curis√©",
      });
      
      return currentStoryId;
      
    } catch (error: any) {
      console.error('‚ùå [PostgreSQL Fallback] Erreur:', error);
      
      // Gestion sp√©cifique des erreurs RLS
      let errorMessage = error.message;
      if (error.message?.includes('row-level security')) {
        errorMessage = "Erreur de s√©curit√©: permissions insuffisantes";
        console.error('üîí [PostgreSQL Fallback] Erreur RLS d√©tect√©e:', error);
      }
      
      toast({
        title: "Erreur de g√©n√©ration",
        description: errorMessage,
        variant: "destructive"
      });
      
      throw error;
    } finally {
      setIsGenerating(false);
    }
  }, [toast, user]);

  const checkFallbackMode = useCallback(() => {
    return localStorage.getItem('calmi-fallback-mode') === 'postgresql';
  }, []);

  const activateFallbackMode = useCallback(() => {
    localStorage.setItem('calmi-fallback-mode', 'postgresql');
    localStorage.setItem('calmi-fallback-activated-at', new Date().toISOString());
    console.log('üêò [PostgreSQL Fallback] Mode fallback activ√© avec timestamp');
  }, []);

  const deactivateFallbackMode = useCallback(() => {
    localStorage.removeItem('calmi-fallback-mode');
    localStorage.removeItem('calmi-fallback-activated-at');
    console.log('üêò [PostgreSQL Fallback] Mode fallback d√©sactiv√©');
  }, []);

  const getHealthStatus = useCallback(() => {
    const isFallbackMode = checkFallbackMode();
    const activatedAt = localStorage.getItem('calmi-fallback-activated-at');
    
    return {
      isFallbackMode,
      activatedAt: activatedAt ? new Date(activatedAt) : null,
      isGenerating,
      lastError: null
    };
  }, [checkFallbackMode, isGenerating]);

  return {
    generateStoryWithFallback,
    isGenerating,
    checkFallbackMode,
    activateFallbackMode,
    deactivateFallbackMode,
    getHealthStatus,
    isFallbackMode: checkFallbackMode()
  };
};

// Fonction de g√©n√©ration de contenu c√¥t√© client am√©lior√©e
async function generateContentClientSide(objective: string, childrenNames: string[]): Promise<{
  title: string;
  content: string;
  summary: string;
  preview: string;
}> {
  console.log('üéØ [Content Generation] G√©n√©ration c√¥t√© client pour:', { objective, childrenNames });
  
  // Templates d'histoires enrichis bas√©s sur l'objectif
  const storyTemplates = {
    sleep: {
      title: `L'aventure apaisante de ${childrenNames.join(' et ')}`,
      opening: "Il √©tait une fois, dans un monde doux et paisible",
      theme: "relaxation et sommeil",
      ending: "Et ils s'endormirent paisiblement, berc√©s par cette belle aventure.",
      mood: "calme et r√©confortant"
    },
    focus: {
      title: `${childrenNames.join(' et ')} d√©couvrent la concentration`,
      opening: "Dans un jardin secret o√π tout √©tait calme",
      theme: "concentration et attention",
      ending: "Gr√¢ce √† cette aventure, ils avaient appris √† se concentrer.",
      mood: "zen et focalis√©"
    },
    relax: {
      title: `La d√©tente magique de ${childrenNames.join(' et ')}`,
      opening: "Sur une plage aux sables dor√©s",
      theme: "d√©tente et bien-√™tre",
      ending: "Ils se sentirent compl√®tement d√©tendus et sereins.",
      mood: "apaisant et serein"
    },
    fun: {
      title: `Les joyeuses aventures de ${childrenNames.join(' et ')}`,
      opening: "Dans un monde color√© plein de surprises",
      theme: "joie et amusement",
      ending: "Et ils rirent aux √©clats, heureux de cette belle aventure.",
      mood: "joyeux et √©nergique"
    }
  };

  const template = storyTemplates[objective as keyof typeof storyTemplates] || storyTemplates.fun;
  
  // G√©n√©rer le contenu personnalis√© enrichi
  const content = `${template.opening}, ${childrenNames.join(' et ')} d√©couvrirent un monde merveilleux aux couleurs chatoyantes.

Dans cette atmosph√®re ${template.mood}, ils commenc√®rent une aventure extraordinaire. Chaque pas les menait vers de nouvelles d√©couvertes, chaque sourire illuminait leur chemin comme des √©toiles scintillantes.

${childrenNames[0]} remarqua des cr√©atures bienveillantes qui dansaient gracieusement autour d'eux. ${childrenNames.length > 1 ? childrenNames[1] + ' d√©couvrit' : 'Il d√©couvrit'} des fleurs aux couleurs extraordinaires qui chantaient des m√©lodies douces et apaisantes.

Au fil de leur voyage enchanteur, ils apprirent l'importance de ${template.theme}. Chaque moment partag√© renfor√ßait leur amiti√© et leur confiance mutuelle, cr√©ant des liens magiques qui les unissaient.

Les sages qu'ils rencontr√®rent leur enseign√®rent de pr√©cieuses le√ßons sur la vie, l'amiti√© et le courage. Ils d√©couvrirent que chaque d√©fi √©tait une opportunit√© de grandir ensemble.

${template.ending}

Cette histoire a √©t√© cr√©√©e sp√©cialement pour ${childrenNames.join(' et ')}, avec tout l'amour du monde et la magie du syst√®me PostgreSQL de Calmiverse.`;

  const summary = `Une belle histoire de ${template.theme} mettant en sc√®ne ${childrenNames.join(' et ')} dans une aventure personnalis√©e ${template.mood}.`;
  
  const preview = content.substring(0, 250) + "...";

  // Simuler un d√©lai de g√©n√©ration r√©aliste avec progression
  await new Promise(resolve => setTimeout(resolve, 2500));

  return {
    title: template.title,
    content,
    summary,
    preview
  };
}

export default usePostgreSQLFallback;
