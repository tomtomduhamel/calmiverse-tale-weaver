
import { useState, useEffect, useRef, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface UseSoundPlayerProps {
  soundDetails: any | null;
  autoPlay?: boolean;
  musicEnabled: boolean;
}

/**
 * Hook pour g√©rer la lecture d'un son
 */
export const useSoundPlayer = ({ 
  soundDetails, 
  autoPlay = false,
  musicEnabled
}: UseSoundPlayerProps) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const { toast } = useToast();

  // Charger et configurer l'audio lorsque les d√©tails du son sont disponibles
  useEffect(() => {
    const setupAudio = async () => {
      console.log("üîÑ Configuration audio - musicEnabled:", musicEnabled, "soundDetails:", soundDetails?.file_path);
      
      // Si la musique est d√©sactiv√©e ou pas de d√©tails de son, ne rien faire
      if (!musicEnabled || !soundDetails || !soundDetails.file_path) {
        console.log("üîÑ Nettoyage audio - conditions non remplies");
        if (audioRef.current) {
          audioRef.current.pause();
          audioRef.current.src = '';
          setIsPlaying(false);
        }
        return;
      }

      try {
        setError(null);
        
        // Pr√©charger l'audio
        console.log(`üîÑ Pr√©chargement du fichier audio: ${soundDetails.file_path}`);
        
        // Obtenir l'URL publique du fichier
        const { data: publicUrl } = supabase.storage
          .from('story_sounds')
          .getPublicUrl(soundDetails.file_path);
          
        if (!publicUrl || !publicUrl.publicUrl) {
          const errorMsg = `Impossible d'obtenir l'URL publique pour: ${soundDetails.file_path}`;
          console.error(`‚ùå ${errorMsg}`);
          setError(errorMsg);
          return;
        }
        
        console.log(`‚úÖ URL audio obtenue: ${publicUrl.publicUrl}`);
        
        // Cr√©er ou r√©utiliser l'√©l√©ment audio
        if (!audioRef.current) {
          console.log("üîÑ Cr√©ation d'un nouvel √©l√©ment audio");
          audioRef.current = new Audio();
          audioRef.current.loop = true;  // Lecture en boucle
          audioRef.current.volume = 0.3; // Volume √† 30% pour √™tre moins intrusif
          audioRef.current.crossOrigin = "anonymous"; // Pour √©viter les probl√®mes CORS
          
          // Ajouter des √©couteurs d'√©v√©nements pour le d√©bogage
          audioRef.current.addEventListener('loadstart', () => {
            console.log('üîÑ D√©but du chargement audio');
          });
          
          audioRef.current.addEventListener('canplay', () => {
            console.log('‚úÖ Audio pr√™t √† √™tre lu');
          });
          
          audioRef.current.addEventListener('canplaythrough', () => {
            console.log('‚úÖ Audio pr√™t √† √™tre lu enti√®rement sans mise en m√©moire tampon');
          });
          
          audioRef.current.addEventListener('error', (e) => {
            const audioElement = e.currentTarget as HTMLAudioElement;
            const errorMsg = audioElement.error ? 
              `Erreur audio ${audioElement.error.code}: ${audioElement.error.message}` : 
              'Erreur audio inconnue';
            console.error('‚ùå Erreur de lecture audio:', errorMsg);
            setError(errorMsg);
            setIsPlaying(false);
          });
          
          audioRef.current.addEventListener('ended', () => {
            console.log('üîÑ Lecture audio termin√©e');
            setIsPlaying(false);
          });
          
          audioRef.current.addEventListener('pause', () => {
            console.log('‚è∏Ô∏è Audio mis en pause');
            setIsPlaying(false);
          });
          
          audioRef.current.addEventListener('play', () => {
            console.log('‚ñ∂Ô∏è Audio en cours de lecture');
            setIsPlaying(true);
          });
        }
        
        // D√©finir la source audio
        if (audioRef.current.src !== publicUrl.publicUrl) {
          console.log("üîÑ Mise √† jour de la source audio");
          audioRef.current.src = publicUrl.publicUrl;
          
          // Pr√©charger le fichier
          audioRef.current.load();
        }
        
        // D√©marrer la lecture automatiquement si requis
        if (autoPlay && audioRef.current.readyState >= 2) { // HAVE_CURRENT_DATA
          console.log('üîÑ Tentative de lecture automatique...');
          try {
            await audioRef.current.play();
            console.log('‚úÖ Lecture automatique d√©marr√©e');
            setIsPlaying(true);
          } catch (playError) {
            console.error('‚ùå Erreur de lecture automatique:', playError);
            setError(`Lecture auto impossible: ${playError instanceof Error ? playError.message : String(playError)}`);
          }
        }
      } catch (error: any) {
        console.error('‚ùå Erreur de configuration audio:', error);
        setError(`Configuration √©chou√©e: ${error.message || 'Erreur inconnue'}`);
      }
    };

    setupAudio();
    
    // Nettoyer lors du d√©montage du composant
    return () => {
      console.log('üßπ Nettoyage du fond sonore');
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.src = '';
        setIsPlaying(false);
      }
    };
  }, [soundDetails, autoPlay, musicEnabled]);

  // M√©thode pour basculer la lecture
  const togglePlay = useCallback(async () => {
    if (!audioRef.current || !musicEnabled) {
      console.log("‚ùå Impossible de basculer la lecture - audio non disponible ou musique d√©sactiv√©e");
      return;
    }
    
    console.log(`üîÑ Bascule de lecture - √âtat actuel: ${isPlaying ? 'En lecture' : 'En pause'}`);
    
    try {
      if (isPlaying) {
        audioRef.current.pause();
        console.log('‚è∏Ô∏è Lecture mise en pause');
      } else {
        // V√©rifier si l'audio est pr√™t avant de jouer
        if (audioRef.current.readyState < 2) {
          console.log('üîÑ Audio pas encore pr√™t, attente...');
          await new Promise((resolve) => {
            const onCanPlay = () => {
              audioRef.current?.removeEventListener('canplay', onCanPlay);
              resolve(void 0);
            };
            audioRef.current?.addEventListener('canplay', onCanPlay);
          });
        }
        
        await audioRef.current.play();
        console.log('‚ñ∂Ô∏è Lecture d√©marr√©e');
      }
    } catch (err: any) {
      console.error('‚ùå Erreur de lecture/pause:', err);
      setError(`Erreur de lecture: ${err.message || 'Erreur inconnue'}`);
      toast({
        title: 'Erreur',
        description: 'Impossible de lire le fond sonore',
        variant: 'destructive',
      });
    }
  }, [isPlaying, musicEnabled, toast]);

  // M√©thode pour r√©gler le volume
  const setVolume = useCallback((volume: number) => {
    if (!audioRef.current) return;
    const safeVolume = Math.max(0, Math.min(1, volume));
    audioRef.current.volume = safeVolume;
    console.log(`üîä Volume r√©gl√© √†: ${safeVolume}`);
  }, []);

  // Arr√™ter la lecture
  const stopSound = useCallback(() => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setIsPlaying(false);
      console.log('‚èπÔ∏è Lecture arr√™t√©e');
    }
  }, []);

  return {
    isPlaying,
    togglePlay,
    setVolume,
    stopSound,
    error: error
  };
};

export default useSoundPlayer;
