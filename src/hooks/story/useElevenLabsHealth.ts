
import { useState, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface ElevenLabsHealthStatus {
  isHealthy: boolean;
  secretConfigured: boolean;
  apiKeyValid: boolean;
  lastChecked: Date | null;
  errorMessage: string | null;
}

export const useElevenLabsHealth = () => {
  const [healthStatus, setHealthStatus] = useState<ElevenLabsHealthStatus>({
    isHealthy: false,
    secretConfigured: false,
    apiKeyValid: false,
    lastChecked: null,
    errorMessage: null
  });

  const [isChecking, setIsChecking] = useState(false);

  const checkElevenLabsHealth = useCallback(async (): Promise<ElevenLabsHealthStatus> => {
    setIsChecking(true);
    
    try {
      console.log('üîç [ElevenLabsHealth] V√©rification de la sant√© ElevenLabs...');
      
      // Test de base - ping
      const { data: pingData, error: pingError } = await supabase.functions.invoke('tts-elevenlabs', {
        body: { ping: true }
      });

      if (pingError) {
        console.error('‚ùå [ElevenLabsHealth] Ping √©chou√©:', pingError);
        const status: ElevenLabsHealthStatus = {
          isHealthy: false,
          secretConfigured: false,
          apiKeyValid: false,
          lastChecked: new Date(),
          errorMessage: `Ping √©chou√©: ${pingError.message}`
        };
        setHealthStatus(status);
        return status;
      }

      console.log('‚úÖ [ElevenLabsHealth] Ping r√©ussi');

      // Test de connectivit√© API avec la cl√©
      const { data: connectionData, error: connectionError } = await supabase.functions.invoke('tts-elevenlabs', {
        body: { testConnection: true }
      });

      if (connectionError) {
        console.error('‚ùå [ElevenLabsHealth] Test de connexion √©chou√©:', connectionError);
        const status: ElevenLabsHealthStatus = {
          isHealthy: false,
          secretConfigured: true, // Le ping a fonctionn√©
          apiKeyValid: false,
          lastChecked: new Date(),
          errorMessage: `Connexion API √©chou√©e: ${connectionError.message}`
        };
        setHealthStatus(status);
        return status;
      }

      if (!connectionData?.success) {
        console.error('‚ùå [ElevenLabsHealth] R√©ponse de connexion invalide:', connectionData);
        const status: ElevenLabsHealthStatus = {
          isHealthy: false,
          secretConfigured: true,
          apiKeyValid: false,
          lastChecked: new Date(),
          errorMessage: connectionData?.message || 'R√©ponse de connexion invalide'
        };
        setHealthStatus(status);
        return status;
      }

      console.log('üéâ [ElevenLabsHealth] Sant√© compl√®te confirm√©e');
      const status: ElevenLabsHealthStatus = {
        isHealthy: true,
        secretConfigured: true,
        apiKeyValid: true,
        lastChecked: new Date(),
        errorMessage: null
      };
      setHealthStatus(status);
      return status;

    } catch (error: any) {
      console.error('üí• [ElevenLabsHealth] Exception lors de la v√©rification:', error);
      const status: ElevenLabsHealthStatus = {
        isHealthy: false,
        secretConfigured: false,
        apiKeyValid: false,
        lastChecked: new Date(),
        errorMessage: `Exception: ${error.message}`
      };
      setHealthStatus(status);
      return status;
    } finally {
      setIsChecking(false);
    }
  }, []);

  const getHealthSummary = useCallback((): string => {
    if (!healthStatus.lastChecked) return 'Non test√©';
    if (healthStatus.isHealthy) return '‚úÖ Fonctionnel';
    if (!healthStatus.secretConfigured) return '‚ö†Ô∏è Secret manquant';
    if (!healthStatus.apiKeyValid) return '‚ùå Cl√© API invalide';
    return '‚ùå Probl√®me d√©tect√©';
  }, [healthStatus]);

  return {
    healthStatus,
    isChecking,
    checkElevenLabsHealth,
    getHealthSummary
  };
};
