
import { useState, useCallback, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface UseElevenLabsTTSOptions {
  voiceId?: string;
  modelId?: string;
}

export const useElevenLabsTTS = (options: UseElevenLabsTTSOptions = {}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const { toast } = useToast();

  const {
    voiceId = '9BWtsMINqrJLrRacOk9x', // Aria par d√©faut
    modelId = 'eleven_multilingual_v2'
  } = options;

  const stopAudio = useCallback(() => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setIsPlaying(false);
    }
  }, []);

  const generateAndPlaySpeech = useCallback(async (text: string) => {
    if (!text.trim()) {
      toast({
        title: "Erreur",
        description: "Le texte ne peut pas √™tre vide",
        variant: "destructive",
      });
      return;
    }

    // Si d√©j√† en train de jouer, arr√™ter
    if (isPlaying) {
      stopAudio();
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      console.log('üéôÔ∏è D√©but g√©n√©ration ElevenLabs...', { 
        textLength: text.length, 
        voiceId, 
        modelId 
      });

      // Limiter le texte pour √©viter les timeouts
      const limitedText = text.slice(0, 1000);
      if (text.length > 1000) {
        toast({
          title: "Texte tronqu√©",
          description: `Le texte a √©t√© limit√© √† 1000 caract√®res (√©tait ${text.length})`,
        });
      }
      
      const { data, error } = await supabase.functions.invoke('elevenlabs-tts', {
        body: { 
          text: limitedText,
          voiceId,
          modelId 
        }
      });

      console.log('üì° R√©ponse re√ßue:', { data, error });

      if (error) {
        console.error('‚ùå Erreur Supabase fonction:', error);
        throw new Error(`Erreur de connexion: ${error.message}`);
      }

      if (!data?.success || !data?.audioContent) {
        console.error('‚ùå R√©ponse invalide:', data);
        throw new Error(data?.error || 'R√©ponse invalide du service de synth√®se vocale');
      }

      // Cr√©er l'URL audio √† partir du base64
      console.log('üéµ Cr√©ation de l\'audio blob...');
      const audioBlob = new Blob(
        [Uint8Array.from(atob(data.audioContent), c => c.charCodeAt(0))],
        { type: 'audio/mpeg' }
      );
      const audioUrl = URL.createObjectURL(audioBlob);

      // Cr√©er et configurer l'√©l√©ment audio
      const audio = new Audio(audioUrl);
      audioRef.current = audio;

      // Gestionnaires d'√©v√©nements audio
      audio.onloadstart = () => {
        console.log('üîÑ Chargement audio d√©marr√©');
        setIsLoading(true);
      };
      
      audio.oncanplay = () => {
        console.log('‚úÖ Audio pr√™t √† jouer');
        setIsLoading(false);
      };
      
      audio.onplay = () => {
        console.log('‚ñ∂Ô∏è Lecture audio d√©marr√©e');
        setIsPlaying(true);
      };
      
      audio.onended = () => {
        console.log('‚èπÔ∏è Lecture audio termin√©e');
        setIsPlaying(false);
        URL.revokeObjectURL(audioUrl);
      };
      
      audio.onerror = (e) => {
        console.error('üí• Erreur lecture audio:', e);
        setIsPlaying(false);
        setError('Erreur lors de la lecture audio');
        URL.revokeObjectURL(audioUrl);
        toast({
          title: "Erreur de lecture",
          description: "Impossible de lire l'audio g√©n√©r√©",
          variant: "destructive",
        });
      };

      // Lancer la lecture
      await audio.play();

      toast({
        title: "Lecture d√©marr√©e",
        description: `Audio g√©n√©r√© avec la voix s√©lectionn√©e`,
      });

    } catch (error: any) {
      console.error('üí• Erreur synth√®se vocale:', error);
      const errorMessage = error.message || 'Erreur lors de la g√©n√©ration de la voix';
      setError(errorMessage);
      
      // Messages d'erreur sp√©cifiques
      let userMessage = "Impossible de g√©n√©rer l'audio";
      if (errorMessage.includes('Cl√© API')) {
        userMessage = "Cl√© API ElevenLabs non configur√©e ou invalide";
      } else if (errorMessage.includes('quota')) {
        userMessage = "Limite de quota ElevenLabs atteinte";
      } else if (errorMessage.includes('Timeout')) {
        userMessage = "La g√©n√©ration a pris trop de temps, essayez un texte plus court";
      }
      
      toast({
        title: "Erreur de synth√®se vocale",
        description: userMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  }, [voiceId, modelId, isPlaying, stopAudio, toast]);

  return {
    generateAndPlaySpeech,
    stopAudio,
    isLoading,
    isPlaying,
    error
  };
};
