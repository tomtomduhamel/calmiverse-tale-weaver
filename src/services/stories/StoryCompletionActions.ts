import type { Story } from '@/types/story';

interface StoryCompletionOptions {
  onNotification?: (title: string, message: string, storyId: string) => void;
  onNavigate?: (path: string) => void;
  onRefresh?: () => void;
}

/**
 * Actions centralis√©es pour la finalisation des histoires
 * G√®re les √©tapes post-g√©n√©ration comme les notifications, la navigation, etc.
 */
export class StoryCompletionActions {
  private options: StoryCompletionOptions;

  constructor(options: StoryCompletionOptions = {}) {
    this.options = options;
  }

  /**
   * Actions √† ex√©cuter quand une histoire est termin√©e avec succ√®s
   */
  async onStoryCompleted(story: Story): Promise<void> {
    try {
      console.log('[StoryCompletionActions] Histoire termin√©e:', story.id, story.title);

      // 1. Notification de r√©ussite
      if (this.options.onNotification) {
        this.options.onNotification(
          '‚ú® Histoire termin√©e !',
          story.title || 'Votre histoire personnalis√©e est maintenant disponible',
          story.id
        );
      }

      // 2. Mise √† jour des donn√©es en cache/√©tat
      if (this.options.onRefresh) {
        this.options.onRefresh();
      }

      // 3. Analytics/tracking (optionnel)
      this.trackStoryCompletion(story);

      // 4. Actions post-traitement
      await this.performPostProcessing(story);

    } catch (error) {
      console.error('[StoryCompletionActions] Erreur lors de la finalisation:', error);
    }
  }

  /**
   * Actions √† ex√©cuter quand une histoire √©choue
   */
  async onStoryFailed(storyId: string, error?: string): Promise<void> {
    try {
      console.log('[StoryCompletionActions] Histoire √©chou√©e:', storyId, error);

      // 1. Notification d'erreur
      if (this.options.onNotification) {
        this.options.onNotification(
          'Erreur de g√©n√©ration',
          error || 'Une erreur est survenue lors de la cr√©ation de l\'histoire',
          storyId
        );
      }

      // 2. Mise √† jour des donn√©es
      if (this.options.onRefresh) {
        this.options.onRefresh();
      }

      // 3. Logging de l'erreur
      this.trackStoryError(storyId, error);

    } catch (err) {
      console.error('[StoryCompletionActions] Erreur lors de la gestion d\'√©chec:', err);
    }
  }

  /**
   * Actions √† ex√©cuter quand l'audio est pr√™t
   */
  async onAudioReady(storyId: string, storyTitle?: string): Promise<void> {
    try {
      console.log('[StoryCompletionActions] Audio pr√™t:', storyId);

      // 1. Notification audio
      if (this.options.onNotification) {
        this.options.onNotification(
          'üîä Audio disponible !',
          storyTitle ? `L'audio de "${storyTitle}" est pr√™t` : 'L\'audio de votre histoire est disponible',
          storyId
        );
      }

      // 2. Mise √† jour des donn√©es
      if (this.options.onRefresh) {
        this.options.onRefresh();
      }

    } catch (error) {
      console.error('[StoryCompletionActions] Erreur lors de la finalisation audio:', error);
    }
  }

  /**
   * Navigation vers une histoire termin√©e
   */
  navigateToStory(storyId: string): void {
    if (this.options.onNavigate) {
      this.options.onNavigate(`/reader/${storyId}`);
    }
  }

  /**
   * Navigation vers la biblioth√®que
   */
  navigateToLibrary(): void {
    if (this.options.onNavigate) {
      this.options.onNavigate('/library');
    }
  }

  /**
   * Traitement post-g√©n√©ration
   */
  private async performPostProcessing(story: Story): Promise<void> {
    // G√©n√©ration automatique de l'audio si configur√©
    if (this.shouldGenerateAudio(story)) {
      this.requestAudioGeneration(story.id);
    }

    // Mise √† jour du statut de lecture si n√©cessaire
    if (story.status !== 'read') {
      this.updateStoryReadStatus(story.id);
    }
  }

  /**
   * D√©termine si l'audio doit √™tre g√©n√©r√© automatiquement
   */
  private shouldGenerateAudio(story: Story): boolean {
    // Logique bas√©e sur l'abonnement utilisateur, pr√©f√©rences, etc.
    return Boolean(story.content && !story.sound_id);
  }

  /**
   * Demande de g√©n√©ration audio
   */
  private async requestAudioGeneration(storyId: string): Promise<void> {
    try {
      // Ici, on pourrait d√©clencher la g√©n√©ration audio automatiquement
      console.log('[StoryCompletionActions] Demande de g√©n√©ration audio pour:', storyId);
      // Cette fonctionnalit√© pourrait √™tre impl√©ment√©e plus tard
    } catch (error) {
      console.warn('[StoryCompletionActions] Erreur lors de la demande audio:', error);
    }
  }

  /**
   * Mise √† jour du statut de lecture
   */
  private async updateStoryReadStatus(storyId: string): Promise<void> {
    try {
      // Marquer comme non-lue par d√©faut pour les nouvelles histoires
      console.log('[StoryCompletionActions] Mise √† jour du statut pour:', storyId);
    } catch (error) {
      console.warn('[StoryCompletionActions] Erreur lors de la mise √† jour du statut:', error);
    }
  }

  /**
   * Tracking de r√©ussite
   */
  private trackStoryCompletion(story: Story): void {
    try {
      // Analytics/metrics pour le succ√®s
      console.log('[StoryCompletionActions] Story completion tracked:', {
        storyId: story.id,
        title: story.title,
        childrenCount: story.childrenIds?.length || 0,
        objective: story.objective,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.warn('[StoryCompletionActions] Erreur de tracking:', error);
    }
  }

  /**
   * Tracking d'erreur
   */
  private trackStoryError(storyId: string, error?: string): void {
    try {
      // Analytics/metrics pour les erreurs
      console.error('[StoryCompletionActions] Story error tracked:', {
        storyId,
        error,
        timestamp: new Date().toISOString()
      });
    } catch (err) {
      console.warn('[StoryCompletionActions] Erreur de tracking d\'erreur:', err);
    }
  }
}