
// Importer les modules n√©cessaires
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/story-utils.ts";
import { initializeSupabase } from "../_shared/story-utils.ts";

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }
  
  try {
    console.log('üîÑ Fonction retry-story appel√©e');
    
    // Analyse du corps de la requ√™te
    const { storyId } = await req.json();
    
    if (!storyId) {
      throw new Error("L'ID de l'histoire est requis");
    }
    
    console.log(`üìù Tentative de relance pour l'histoire: ${storyId}`);
    
    // Initialisation du client Supabase
    const supabase = initializeSupabase();
    
    // R√©cup√©rer les d√©tails de l'histoire pour obtenir l'objectif et les noms des enfants
    const { data: story, error: storyError } = await supabase
      .from('stories')
      .select('*')
      .eq('id', storyId)
      .single();
      
    if (storyError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©tails de l\'histoire:', storyError);
      throw new Error(`Erreur lors de la r√©cup√©ration des d√©tails de l'histoire: ${storyError.message}`);
    }
    
    console.log('üìñ D√©tails de l\'histoire r√©cup√©r√©s:', { 
      id: story.id, 
      objective: story.objective, 
      childrenNames: story.childrennames 
    });
    
    // Mettre √† jour le statut de l'histoire √† "pending"
    const { error: updateError } = await supabase
      .from('stories')
      .update({
        status: 'pending',
        updatedat: new Date().toISOString(),
        error: null // Supprimer l'erreur pr√©c√©dente
      })
      .eq('id', storyId);
      
    if (updateError) {
      console.error('‚ùå Erreur lors de la mise √† jour du statut:', updateError);
      throw new Error(`Erreur lors de la mise √† jour du statut de l'histoire: ${updateError.message}`);
    }
    
    console.log('‚úÖ Statut mis √† jour vers "pending"');
    
    // Appeler directement la fonction generateStory avec les bonnes donn√©es
    const { data: generateData, error: generateError } = await supabase.functions.invoke('generateStory', {
      body: {
        storyId: storyId,
        objective: story.objective,
        childrenNames: story.childrennames
      }
    });
    
    if (generateError) {
      console.error('‚ùå Erreur lors de l\'appel √† generateStory:', generateError);
      
      // Mettre √† jour le statut √† "error"
      await supabase
        .from('stories')
        .update({
          status: 'error',
          updatedat: new Date().toISOString(),
          error: generateError.message || 'Erreur lors de la g√©n√©ration'
        })
        .eq('id', storyId);
        
      throw generateError;
    }
    
    console.log('üéâ Histoire relanc√©e avec succ√®s:', generateData);
    
    // La r√©ponse indique que la requ√™te a √©t√© trait√©e avec succ√®s
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: "G√©n√©ration de l'histoire relanc√©e avec succ√®s",
        data: generateData 
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      }
    );
  } catch (error: any) {
    // Gestion des erreurs
    console.error("‚ùå Erreur dans retry-story:", error.message);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Erreur inconnue lors de la relance' 
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 400,
      }
    );
  }
});
